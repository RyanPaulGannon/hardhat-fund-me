{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\ncontract FundMe {\n  using PriceConverter for uint256;\n\n  // Using constant keeps gas cost down, syntactically uppercase and underscores\n  uint256 public constant MINIMUM_USD = 10 * 1e18;\n\n  address[] public funders;\n  mapping(address => uint256) public addressToAmountFunded;\n\n  // Immutability, also saves gas\n  address public immutable iOwner;\n\n  AggregatorV3Interface public priceFeed;\n\n  constructor(address priceFeedAddress) {\n    iOwner = msg.sender;\n    priceFeed = AggregatorV3Interface(priceFeedAddress);\n  }\n\n  function fund() public payable {\n    // Create custom error\n    require(msg.value.getConversionRate(priceFeed) >= 1e18, \"Not enough eth\");\n    funders.push(msg.sender);\n    addressToAmountFunded[msg.sender] += msg.value;\n  }\n\n  function withdraw() public {\n    for (\n      uint256 fundersIndex = 0;\n      fundersIndex < funders.length;\n      fundersIndex++\n    ) {\n      address funder = funders[fundersIndex];\n      addressToAmountFunded[funder] = 0;\n    }\n    // Reset the array\n    funders = new address[](0);\n    // Withdraw the funds\n\n    // Three ways: Transfer, send, call. Transfer easiest way.\n\n    // // Transfer (capped at 2300 gas, throws error)\n    // payable (msg.sender).transfer(address(this).balance);\n\n    // // Send (capped at 2300 gas, returns boolean)\n    // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n    // require(sendSuccess, \"Send Failed\");\n\n    // Call (one of the first lower level commands, can be used to call almost any function without\n    // needing abi. Looks similar to send.\n    (bool callSuccess, ) = payable(msg.sender).call{\n      value: address(this).balance\n    }(\"\");\n    require(callSuccess, \"Call Failed\");\n  }\n\n  // Modifier is the first code processed\n  modifier onlyOwner() {\n    // require(msg.sender == i_owner); Revert and require do the same thing\n    if (msg.sender != iOwner) {\n      revert NotOwner();\n    } // Saves gas by remove strings as errors\n    _; // This represents doing the rest of the code\n  }\n\n  // If someone sends funding to the contract, it can still be processed by one of the following transactions\n  receive() external payable {\n    fund();\n  }\n\n  fallback() external payable {\n    fund();\n  }\n}\n\n// Get funds from users\n// Withdraw funds\n// Set a minimum funding value in USD\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n  function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\n    // Goerli\n    // ABI = Application Binary Interface\n    // Address in ETH/USD = 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\n    return uint256(answer * 1e10);\n  }\n\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\n    // Always multiple by dividing in Solidity\n    uint256 ethPrice = getPrice(priceFeed);\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n    return ethAmountInUsd;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}